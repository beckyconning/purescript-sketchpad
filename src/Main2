module Main where

import Prelude

import Data.Maybe
import Data.Either
import Data.Functor (($>))

import Control.Coroutine
import Control.Coroutine.Aff
import Control.Monad.Eff.Class
import Control.Monad.Eff.Console hiding (error)
import Control.Monad.Eff.Exception (error)
import Control.Monad.Aff

fail _ = makeAff \f _ -> f $ error "Main.fail: Failed"

p :: Producer String (Aff _) String
p = produce \emit -> launchAff do
 later' 2000 $ fail unit

c :: Consumer String (Aff (console :: CONSOLE | _)) String
c = consumer \s -> liftEff (log s) $> Nothing

main = runAff print log $ runProcess (p $$ c)
